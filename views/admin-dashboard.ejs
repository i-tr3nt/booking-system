<!DOCTYPE html>
<html lang="en">
<head>
    <meta charset="UTF-8">
    <meta name="viewport" content="width=device-width, initial-scale=1.0">
    <title>Admin Dashboard - THRU ZIM</title>
    <link rel="stylesheet" href="/css/style.css">
    <link rel="stylesheet" href="https://cdnjs.cloudflare.com/ajax/libs/font-awesome/6.0.0/css/all.min.css">
    <style>
        .admin-header {
            display: flex;
            justify-content: space-between;
            align-items: center;
            margin-bottom: 2rem;
        }

        .admin-actions {
            display: flex;
            gap: 1rem;
        }

        .action-btn {
            display: inline-flex;
            align-items: center;
            gap: 0.5rem;
            padding: 0.5rem 1rem;
            border-radius: 0.25rem;
            color: white;
            text-decoration: none;
            font-size: 0.875rem;
            transition: opacity 0.2s;
        }

        .action-btn:hover {
            opacity: 0.9;
        }

        .add-btn {
            background-color: #10B981;
        }

        .edit-btn {
            background-color: #3B82F6;
        }

        .delete-btn {
            background-color: #EF4444;
        }

        .cancel-btn {
            background-color: #F59E0B;
        }

        /* Dashboard Navigation Styles */
        .dashboard-nav {
            display: flex;
            gap: 1rem;
            margin-bottom: 2rem;
            border-bottom: 2px solid #e2e8f0;
            padding-bottom: 1rem;
        }

        .dashboard-nav-item {
            padding: 0.75rem 1.5rem;
            border-radius: 0.5rem;
            cursor: pointer;
            font-weight: 500;
            transition: all 0.3s ease;
            color: #4B5563;
            text-decoration: none;
        }

        .dashboard-nav-item:hover {
            background-color: #F3F4F6;
        }

        .dashboard-nav-item.active {
            background-color: #3B82F6;
            color: white;
        }

        .dashboard-content {
            display: none;
        }

        .dashboard-content.active {
            display: block;
        }

        /* Existing Modal Styles */
        .modal {
            display: none;
            position: fixed;
            top: 0;
            left: 0;
            width: 100%;
            height: 100%;
            background-color: rgba(0, 0, 0, 0.5);
            z-index: 1000;
        }

        .modal-content {
            position: relative;
            background-color: white;
            margin: 2rem auto;
            padding: 2rem;
            width: 90%;
            max-width: 500px;
            border-radius: 0.5rem;
            box-shadow: 0 4px 6px rgba(0, 0, 0, 0.1);
            max-height: 90vh;
            overflow-y: auto;
        }

        .close-modal {
            position: absolute;
            top: 1rem;
            right: 1rem;
            font-size: 1.5rem;
            cursor: pointer;
            color: #6B7280;
        }

        .modal-form {
            display: flex;
            flex-direction: column;
            gap: 1rem;
        }

        .form-group {
            display: flex;
            flex-direction: column;
            gap: 0.5rem;
        }

        .form-group label {
            font-weight: 500;
            color: #1F2937;
        }

        .form-group input,
        .form-group select,
        .form-group textarea {
            padding: 0.75rem;
            border: 1px solid #e2e8f0;
            border-radius: 0.25rem;
            font-size: 1rem;
            width: 100%;
        }

        .form-group textarea {
            resize: vertical;
            min-height: 100px;
        }

        .form-actions {
            display: flex;
            gap: 1rem;
            margin-top: 1.5rem;
        }

        .form-actions .submit-btn {
            flex: 1;
            background-color: #10B981;
            color: white;
            padding: 0.75rem;
            border: none;
            border-radius: 0.25rem;
            font-size: 1rem;
            cursor: pointer;
            transition: background-color 0.2s;
        }

        .form-actions .submit-btn:hover {
            background-color: #059669;
        }

        .form-actions .cancel-btn {
            flex: 1;
            background-color: #6B7280;
            color: white;
            padding: 0.75rem;
            border: none;
            border-radius: 0.25rem;
            font-size: 1rem;
            cursor: pointer;
            transition: background-color 0.2s;
        }

        .form-actions .cancel-btn:hover {
            background-color: #4B5563;
        }

        .success-message {
            color: #059669;
            margin-top: 1rem;
            text-align: center;
        }

        .error-message {
            color: #dc2626;
            margin-top: 1rem;
            text-align: center;
        }

        /* Inventory Dashboard Styles */
        .inventory-grid {
            display: grid;
            grid-template-columns: repeat(auto-fill, minmax(300px, 1fr));
            gap: 1.5rem;
            margin-top: 2rem;
        }

        .inventory-card {
            background: white;
            border-radius: 0.5rem;
            padding: 1.5rem;
            box-shadow: 0 2px 4px rgba(0, 0, 0, 0.1);
        }

        .inventory-card h3 {
            margin: 0 0 1rem 0;
            color: #1F2937;
        }

        .inventory-stats {
            display: grid;
            grid-template-columns: repeat(2, 1fr);
            gap: 1rem;
        }

        .stat-item {
            text-align: center;
            padding: 1rem;
            background: #F3F4F6;
            border-radius: 0.25rem;
        }

        .stat-value {
            font-size: 1.5rem;
            font-weight: 600;
            color: #3B82F6;
        }

        .stat-label {
            font-size: 0.875rem;
            color: #6B7280;
            margin-top: 0.25rem;
        }

        /* Add these styles to your existing styles */
        .search-filter-section {
            margin: 1rem 0 2rem 0;
            padding: 1rem;
            background-color: #F3F4F6;
            border-radius: 0.5rem;
        }

        .search-box {
            display: flex;
            gap: 0.5rem;
            margin-bottom: 1rem;
        }

        .search-box input {
            flex: 1;
            padding: 0.75rem;
            border: 1px solid #e2e8f0;
            border-radius: 0.25rem;
            font-size: 1rem;
        }

        .search-btn {
            padding: 0.75rem 1.5rem;
            background-color: #3B82F6;
            color: white;
            border: none;
            border-radius: 0.25rem;
            cursor: pointer;
            transition: background-color 0.2s;
        }

        .search-btn:hover {
            background-color: #2563EB;
        }

        .filter-options {
            display: flex;
            gap: 1rem;
            align-items: center;
        }

        .filter-options select {
            padding: 0.75rem;
            border: 1px solid #e2e8f0;
            border-radius: 0.25rem;
            font-size: 1rem;
            min-width: 150px;
        }

        .clear-filters-btn {
            padding: 0.75rem 1.5rem;
            background-color: #6B7280;
            color: white;
            border: none;
            border-radius: 0.25rem;
            cursor: pointer;
            transition: background-color 0.2s;
            display: flex;
            align-items: center;
            gap: 0.5rem;
        }

        .clear-filters-btn:hover {
            background-color: #4B5563;
        }

        /* Add to your existing styles */
        .export-btn {
            background-color: #217346;
            margin-right: 1rem;
        }

        .export-btn:hover {
            background-color: #1a5c38;
        }

        /* Quick Actions Panel Styles */
        .quick-actions-panel {
            display: grid;
            grid-template-columns: repeat(auto-fit, minmax(200px, 1fr));
            gap: 1rem;
            margin: 1.5rem 0;
        }

        .quick-action-card {
            background: white;
            border-radius: 0.5rem;
            padding: 1.5rem;
            text-align: center;
            cursor: pointer;
            transition: transform 0.2s, box-shadow 0.2s;
            box-shadow: 0 2px 4px rgba(0, 0, 0, 0.1);
        }

        .quick-action-card:hover {
            transform: translateY(-2px);
            box-shadow: 0 4px 6px rgba(0, 0, 0, 0.1);
        }

        .quick-action-card i {
            font-size: 2rem;
            color: #10B981;
            margin-bottom: 0.5rem;
        }

        .quick-action-card span {
            display: block;
            color: #4B5563;
            font-weight: 500;
        }

        /* Recent Activities Styles */
        .recent-activities-section {
            background: white;
            border-radius: 0.5rem;
            padding: 1.5rem;
            margin: 1.5rem 0;
            box-shadow: 0 2px 4px rgba(0, 0, 0, 0.1);
        }

        .activities-list {
            margin-top: 1rem;
        }

        .activity-item {
            display: flex;
            align-items: center;
            padding: 1rem;
            border-bottom: 1px solid #E5E7EB;
        }

        .activity-item:last-child {
            border-bottom: none;
        }

        .activity-icon {
            width: 40px;
            height: 40px;
            border-radius: 50%;
            background: #F3F4F6;
            display: flex;
            align-items: center;
            justify-content: center;
            margin-right: 1rem;
        }

        .activity-icon i {
            color: #10B981;
            font-size: 1.25rem;
        }

        .activity-details {
            flex: 1;
        }

        .activity-title {
            color: #1F2937;
            font-weight: 500;
        }

        .activity-meta {
            display: flex;
            gap: 1rem;
            color: #6B7280;
            font-size: 0.875rem;
            margin-top: 0.25rem;
        }

        /* Status Badge Styles */
        .status-badge {
            padding: 0.25rem 0.5rem;
            border-radius: 9999px;
            font-size: 0.875rem;
            font-weight: 500;
        }

        .status-badge.available {
            background: #D1FAE5;
            color: #059669;
        }

        .status-badge.in-use {
            background: #DBEAFE;
            color: #2563EB;
        }

        .status-badge.maintenance {
            background: #FEF3C7;
            color: #D97706;
        }

        .status-badge.damaged {
            background: #FEE2E2;
            color: #DC2626;
        }

        .status-badge.retired {
            background: #F3F4F6;
            color: #4B5563;
        }

        .notification {
            position: fixed;
            top: 20px;
            right: 20px;
            padding: 15px 25px;
            border-radius: 4px;
            color: white;
            z-index: 9999;
            opacity: 1;
            transition: opacity 0.3s ease;
        }
        .notification.success {
            background-color: #4CAF50;
        }
        .notification.error {
            background-color: #f44336;
        }
        
        /* Mobile Responsive Styles */
        @media (max-width: 768px) {
            .admin-header {
                flex-direction: column;
                align-items: stretch;
                gap: 1rem;
            }
            
            .admin-actions {
                flex-direction: column;
                gap: 0.5rem;
            }
            
            .action-btn {
                width: 100%;
                justify-content: center;
            }
            
            .dashboard-nav {
                flex-direction: column;
                gap: 0.5rem;
            }
            
            .dashboard-nav-item {
                text-align: center;
                padding: 1rem;
            }
            
            .inventory-grid {
                grid-template-columns: 1fr;
                gap: 1rem;
            }
            
            .inventory-stats {
                grid-template-columns: 1fr;
                gap: 0.5rem;
            }
            
            .quick-actions-panel {
                grid-template-columns: repeat(2, 1fr);
                gap: 0.75rem;
            }
            
            .quick-action-card {
                padding: 1rem;
            }
            
            .quick-action-card i {
                font-size: 1.5rem;
            }
            
            .activity-item {
                flex-direction: column;
                align-items: flex-start;
                gap: 0.75rem;
            }
            
            .activity-icon {
                align-self: center;
            }
            
            .activity-meta {
                flex-direction: column;
                gap: 0.25rem;
            }
            
            .search-filter-section {
                padding: 0.75rem;
            }
            
            .search-box {
                flex-direction: column;
                gap: 0.5rem;
            }
            
            .search-btn {
                width: 100%;
            }
            
            .filter-options {
                flex-direction: column;
                gap: 0.5rem;
            }
            
            .filter-options select {
                width: 100%;
            }
            
            .clear-filters-btn {
                width: 100%;
                justify-content: center;
            }
            
            .modal-content {
                width: 95%;
                margin: 1rem auto;
                padding: 1.5rem;
                max-height: 95vh;
            }
            
            .form-actions {
                flex-direction: column;
            }
            
            .events-table-container {
                overflow-x: auto;
                -webkit-overflow-scrolling: touch;
            }
            
            .events-table {
                min-width: 600px;
            }
            
            .events-table th,
            .events-table td {
                padding: 0.75rem 0.5rem;
                font-size: 0.875rem;
            }
        }
        
        @media (max-width: 480px) {
            .quick-actions-panel {
                grid-template-columns: 1fr;
            }
            
            .inventory-card {
                padding: 1rem;
            }
            
            .stat-item {
                padding: 0.75rem;
            }
            
            .stat-value {
                font-size: 1.25rem;
            }
            
            .modal-content {
                width: 98%;
                margin: 0.5rem auto;
                padding: 1rem;
            }
            
            .action-btn {
                font-size: 0.8rem;
                padding: 0.5rem 0.75rem;
            }
            
            .events-table th,
            .events-table td {
                padding: 0.5rem 0.25rem;
                font-size: 0.8rem;
            }
        }
    </style>
</head>
<body>
    <nav class="navbar">
        <div class="nav-container">
            <h1 class="nav-title">THRU ZIM Admin - <%= adminName %></h1>
            <div class="nav-links">
                <a href="/" class="nav-link">Home</a>
                <a href="/events" class="nav-link">Events</a>
                <a href="/admin" class="nav-link active">Admin</a>
                <a href="/admin/logout" class="nav-link">Logout</a>
            </div>
        </div>
    </nav>

    <div class="container">
        <!-- Dashboard Navigation -->
        <div class="dashboard-nav">
            <a href="/admin?dashboard=booking" class="dashboard-nav-item <%= (typeof dashboard !== 'undefined' && dashboard === 'booking') ? 'active' : '' %>">Booking Dashboard</a>
            <a href="/admin?dashboard=inventory" class="dashboard-nav-item <%= (typeof dashboard !== 'undefined' && dashboard === 'inventory') ? 'active' : '' %>">Inventory Dashboard</a>
        </div>

        <!-- Booking Dashboard Content -->
        <div id="booking-dashboard" class="dashboard-content <%= (typeof dashboard !== 'undefined' && dashboard === 'booking') ? 'active' : '' %>">
            <div class="admin-header">
                <h2>Booking Dashboard</h2>
                <div class="admin-actions">
                    <button class="action-btn add-btn" onclick="openModal('add')">
                        <i class="fas fa-plus"></i> Add Booking
                    </button>
                </div>
            </div>

            <!-- Equipment Availability Section -->
            <div class="inventory-grid" style="margin-bottom: 2rem;">
                <div class="inventory-card">
                    <h3>Meeting Room</h3>
                    <div class="inventory-stats">
                        <div class="stat-item">
                            <div class="stat-value"><%= equipmentAvailability['Meeting Room'].total %></div>
                            <div class="stat-label">Total Rooms</div>
                        </div>
                        <div class="stat-item">
                            <div class="stat-value"><%= equipmentAvailability['Meeting Room'].available %></div>
                            <div class="stat-label">Available</div>
                        </div>
                    </div>
                </div>

                <div class="inventory-card">
                    <h3>Projectors</h3>
                    <div class="inventory-stats">
                        <div class="stat-item">
                            <div class="stat-value"><%= equipmentAvailability['Projector'].total %></div>
                            <div class="stat-label">Total Units</div>
                        </div>
                        <div class="stat-item">
                            <div class="stat-value"><%= equipmentAvailability['Projector'].available %></div>
                            <div class="stat-label">Available</div>
                        </div>
                    </div>
                </div>

                <div class="inventory-card">
                    <h3>Study Room</h3>
                    <div class="inventory-stats">
                        <div class="stat-item">
                            <div class="stat-value"><%= equipmentAvailability['Study Room'].total %></div>
                            <div class="stat-label">Total Rooms</div>
                        </div>
                        <div class="stat-item">
                            <div class="stat-value"><%= equipmentAvailability['Study Room'].available %></div>
                            <div class="stat-label">Available</div>
                        </div>
                    </div>
                </div>

                <div class="inventory-card">
                    <h3>Gazebo</h3>
                    <div class="inventory-stats">
                        <div class="stat-item">
                            <div class="stat-value"><%= equipmentAvailability['Gazebo'].total %></div>
                            <div class="stat-label">Total Units</div>
                        </div>
                        <div class="stat-item">
                            <div class="stat-value"><%= equipmentAvailability['Gazebo'].available %></div>
                            <div class="stat-label">Available</div>
                        </div>
                    </div>
                </div>

                <div class="inventory-card">
                    <h3>Zoom Video Conferencing</h3>
                    <div class="inventory-stats">
                        <div class="stat-item">
                            <div class="stat-value"><%= equipmentAvailability['Zoom Video Conferencing'].total %></div>
                            <div class="stat-label">Total Units</div>
                        </div>
                        <div class="stat-item">
                            <div class="stat-value"><%= equipmentAvailability['Zoom Video Conferencing'].available %></div>
                            <div class="stat-label">Available</div>
                        </div>
                    </div>
                </div>

                <div class="inventory-card">
                    <h3>Vehicles</h3>
                    <div class="inventory-stats">
                        <div class="stat-item">
                            <div class="stat-value"><%= equipmentAvailability['Vehicles'].total %></div>
                            <div class="stat-label">Total Vehicles</div>
                        </div>
                        <div class="stat-item">
                            <div class="stat-value"><%= equipmentAvailability['Vehicles'].available %></div>
                            <div class="stat-label">Available</div>
                        </div>
                    </div>
                </div>
            </div>

            <!-- Upcoming Events Section -->
            <div class="events-section">
                <h3>Upcoming Events</h3>
                <div class="events-table-container">
                    <table class="events-table">
                        <thead>
                            <tr>
                                <th>Project Name</th>
                                <th>Booked By</th>
                                <th>Event Date</th>
                                <th>Time</th>
                                <th>Equipment</th>
                                <th>Actions</th>
                            </tr>
                        </thead>
                        <tbody>
                            <% upcomingEvents.forEach(event => { %>
                                <tr>
                                    <td><%= event.projectName %></td>
                                    <td><%= event.bookedBy %></td>
                                    <td><%= event.eventDate %></td>
                                    <td><%= event.startTime %> - <%= event.endTime %></td>
                                    <td><%= event.equipment %></td>
                                    <td>
                                        <div class="admin-actions">
                                            <button class="action-btn edit-btn" onclick="openModal('edit', <%= JSON.stringify(event) %>)">
                                                <i class="fas fa-edit"></i> Edit
                                            </button>
                                            <button class="action-btn cancel-btn" onclick="openModal('cancel', <%= JSON.stringify(event) %>)">
                                                <i class="fas fa-ban"></i> Cancel
                                            </button>
                                            <button class="action-btn delete-btn" onclick="openModal('delete', <%= JSON.stringify(event) %>)">
                                                <i class="fas fa-trash"></i> Delete
                                            </button>
                                        </div>
                                    </td>
                                </tr>
                            <% }); %>
                        </tbody>
                    </table>
                </div>
            </div>

            <!-- Past Events Section -->
            <div class="events-section">
                <h3>Event History</h3>
                <div class="events-table-container">
                    <table class="events-table">
                        <thead>
                            <tr>
                                <th>Project Name</th>
                                <th>Booked By</th>
                                <th>Event Date</th>
                                <th>Time</th>
                                <th>Equipment</th>
                                <th>Actions</th>
                            </tr>
                        </thead>
                        <tbody>
                            <% pastEvents.forEach(event => { %>
                                <tr>
                                    <td><%= event.projectName %></td>
                                    <td><%= event.bookedBy %></td>
                                    <td><%= event.eventDate %></td>
                                    <td><%= event.startTime %> - <%= event.endTime %></td>
                                    <td><%= event.equipment %></td>
                                    <td>
                                        <div class="admin-actions">
                                            <button class="action-btn delete-btn" onclick="openModal('delete', <%= JSON.stringify(event) %>)">
                                                <i class="fas fa-trash"></i> Delete
                                            </button>
                                        </div>
                                    </td>
                                </tr>
                            <% }); %>
                        </tbody>
                    </table>
                </div>
            </div>
        </div>

        <!-- Inventory Dashboard Content -->
        <div id="inventory-dashboard" class="dashboard-content <%= (typeof dashboard !== 'undefined' && dashboard === 'inventory') ? 'active' : '' %>">
            <div class="admin-header">
                <h2>Inventory Dashboard</h2>
            </div>

            <!-- Quick Actions Panel -->
            <div class="quick-actions-panel">
                <div class="quick-action-card" onclick="openInventoryModal('add')">
                    <i class="fas fa-plus-circle"></i>
                    <span>Add Item</span>
                </div>
                <div class="quick-action-card" onclick="openStockMovementModal()">
                    <i class="fas fa-exchange-alt"></i>
                    <span>Record Movement</span>
                </div>
                <div class="quick-action-card" onclick="document.getElementById('searchInput').focus()">
                    <i class="fas fa-search"></i>
                    <span>Search Items</span>
                </div>
                <div class="quick-action-card" onclick="exportToExcel()">
                    <i class="fas fa-file-export"></i>
                    <span>Export Data</span>
                </div>
            </div>

            <!-- Recent Activities Section -->
            <div class="recent-activities-section">
                <h3>Recent Activities</h3>
                <div class="activities-list">
                    <% if (typeof recentActivities !== 'undefined' && recentActivities.length > 0) { %>
                        <% recentActivities.forEach(activity => { %>
                            <div class="activity-item">
                                <div class="activity-icon">
                                    <% if (activity.action_type === 'add') { %>
                                        <i class="fas fa-plus-circle"></i>
                                    <% } else if (activity.action_type === 'move') { %>
                                        <i class="fas fa-exchange-alt"></i>
                                    <% } else if (activity.action_type === 'damage') { %>
                                        <i class="fas fa-exclamation-triangle"></i>
                                    <% } else { %>
                                        <i class="fas fa-info-circle"></i>
                                    <% } %>
                                </div>
                                <div class="activity-details">
                                    <div class="activity-title"><%= activity.action_details %></div>
                                    <div class="activity-meta">
                                        <span class="activity-user"><%= activity.performed_by %></span>
                                        <span class="activity-time"><%= new Date(activity.action_date).toLocaleString() %></span>
                                    </div>
                                </div>
                            </div>
                        <% }); %>
                    <% } else { %>
                        <div class="no-activities">No recent activities</div>
                    <% } %>
                </div>
            </div>

            <!-- Search and Filter Section -->
            <div class="search-filter-section">
                <div class="search-box">
                    <input type="text" id="searchInput" placeholder="Search by name, serial number, or project...">
                    <button class="search-btn" onclick="searchInventory()">
                        <i class="fas fa-search"></i>
                    </button>
                </div>
                <div class="filter-options">
                    <select id="statusFilter" onchange="filterInventory()">
                        <option value="">All Status</option>
                        <option value="Available">Available</option>
                        <option value="In Use">In Use</option>
                        <option value="Maintenance">Maintenance</option>
                        <option value="Damaged">Damaged</option>
                        <option value="Retired">Retired</option>
                    </select>
                    <select id="locationFilter" onchange="filterInventory()">
                        <option value="">All Locations</option>
                        <option value="Data Office">Data Office</option>
                        <option value="Server Room">Server Room</option>
                        <option value="Container">Container</option>
                    </select>
                    <button class="clear-filters-btn" onclick="clearFilters()">
                        <i class="fas fa-times"></i> Clear Filters
                    </button>
                </div>
            </div>

            <% if (success) { %>
                <div class="success-message" id="successMessage"><%= success %></div>
            <% } %>
            <% if (error) { %>
                <div class="error-message"><%= error %></div>
            <% } %>

            <!-- Inventory Table -->
            <div class="events-table-container">
                <table class="events-table">
                    <thead>
                        <tr>
                            <th>Name</th>
                            <th>Serial Number</th>
                            <th>Project</th>
                            <th>Quantity</th>
                            <th>Status</th>
                            <th>Condition</th>
                            <th>Storage Location</th>
                            <th>Last Updated</th>
                            <th>Actions</th>
                        </tr>
                    </thead>
                    <tbody>
                        <% if (typeof inventoryItems !== 'undefined' && inventoryItems.length > 0) { %>
                            <% inventoryItems.forEach(item => { %>
                                <tr>
                                    <td><%= item.name %></td>
                                    <td><%= item.serial_number %></td>
                                    <td><%= item.project %></td>
                                    <td><%= item.quantity || 1 %></td>
                                    <td><span class="status-badge <%= (item.status || 'Available').toLowerCase() %>"><%= item.status || 'Available' %></span></td>
                                    <td><%= item.condition || 'New' %></td>
                                    <td><%= item.storage_location || 'Data Office' %></td>
                                    <td><%= new Date(item.created_at).toLocaleString() %></td>
                                    <td>
                                        <div class="admin-actions">
                                            <button class="action-btn edit-btn" onclick="openInventoryModal('edit', <%= JSON.stringify(item) %>)">
                                                <i class="fas fa-edit"></i>
                                            </button>
                                            <button class="action-btn move-btn" onclick="openStockMovementModal(<%= item.id %>)">
                                                <i class="fas fa-exchange-alt"></i>
                                            </button>
                                            <button class="action-btn delete-btn" onclick="openInventoryModal('delete', <%= JSON.stringify(item) %>)">
                                                <i class="fas fa-trash"></i>
                                            </button>
                                        </div>
                                    </td>
                                </tr>
                            <% }); %>
                        <% } else { %>
                            <tr>
                                <td colspan="9" style="text-align: center;">No inventory items found</td>
                            </tr>
                        <% } %>
                    </tbody>
                </table>
            </div>
        </div>
    </div>

    <!-- Add/Edit Modal -->
    <div id="bookingModal" class="modal">
        <div class="modal-content">
            <span class="close-modal" onclick="closeModal()">&times;</span>
            <h3 id="modalTitle">Add Booking</h3>
            <form id="bookingForm" class="modal-form" action="/admin/bookings" method="POST">
                <input type="hidden" id="bookingId" name="id">
                <input type="hidden" id="action" name="action" value="add">
                
                <div class="form-group">
                    <label for="projectName">Project Name</label>
                    <input type="text" id="projectName" name="projectName" required>
                </div>
                
                <div class="form-group">
                    <label for="bookedBy">Booked By</label>
                    <input type="text" id="bookedBy" name="bookedBy" required>
                </div>
                
                <div class="form-group">
                    <label for="eventDate">Event Date</label>
                    <input type="date" id="eventDate" name="eventDate" required>
                </div>
                
                <div class="form-group">
                    <label for="startTime">Start Time</label>
                    <input type="time" id="startTime" name="startTime" required>
                </div>
                
                <div class="form-group">
                    <label for="endTime">End Time</label>
                    <input type="time" id="endTime" name="endTime" required>
                </div>
                
                <div class="form-group">
                    <label for="equipment">Equipment</label>
                    <select id="equipment" name="equipment" required>
                        <option value="Meeting Room + Projector 1">Meeting Room + Projector 1</option>
                        <option value="Meeting Room + Projector 2">Meeting Room + Projector 2</option>
                        <option value="Study Room + Projector 1">Study Room + Projector 1</option>
                        <option value="Study Room + Projector 2">Study Room + Projector 2</option>
                        <option value="Gazebo + Projector 1">Gazebo + Projector 1</option>
                        <option value="Gazebo + Projector 2">Gazebo + Projector 2</option>
                        <option value="Zoom Video Conferencing">Zoom Video Conferencing</option>
                    </select>
                </div>
                
                <div class="form-actions">
                    <button type="submit" class="submit-btn">Submit</button>
                    <button type="button" class="cancel-btn" onclick="closeModal()">Cancel</button>
                </div>
            </form>
        </div>
    </div>

    <!-- Delete/Cancel Modal -->
    <div id="confirmModal" class="modal">
        <div class="modal-content">
            <span class="close-modal" onclick="closeModal()">&times;</span>
            <h3 id="confirmTitle">Confirm Action</h3>
            <p id="confirmMessage"></p>
            <form id="confirmForm" class="modal-form" action="/admin/bookings" method="POST">
                <input type="hidden" id="confirmId" name="id">
                <input type="hidden" id="confirmAction" name="action">
                <button type="submit" class="submit-btn">Confirm</button>
            </form>
        </div>
    </div>

    <!-- Inventory Modal -->
    <div id="inventoryModal" class="modal">
        <div class="modal-content">
            <span class="close-modal" onclick="closeInventoryModal()">&times;</span>
            <h3 id="inventoryModalTitle">Add Inventory Item</h3>
            <form id="inventoryForm" class="modal-form" action="/admin/inventory" method="POST">
                <input type="hidden" id="inventoryId" name="id">
                <input type="hidden" id="inventoryAction" name="action" value="add">
                
                <div class="form-group">
                    <label for="name">Name</label>
                    <input type="text" id="name" name="name" required>
                </div>
                
                <div class="form-group">
                    <label for="serial_number">Serial Number</label>
                    <input type="text" id="serial_number" name="serial_number" required>
                </div>
                
                <div class="form-group">
                    <label for="project">Project</label>
                    <input type="text" id="project" name="project">
                </div>
                
                <div class="form-group">
                    <label for="description">Description</label>
                    <textarea id="description" name="description" rows="3"></textarea>
                </div>
                
                <div class="form-group">
                    <label for="notes">Notes</label>
                    <textarea id="notes" name="notes" rows="3"></textarea>
                </div>
                
                <div class="form-group">
                    <label for="supplier">Supplier</label>
                    <input type="text" id="supplier" name="supplier">
                </div>
                
                <div class="form-group">
                    <label for="date_received">Date Received</label>
                    <input type="date" id="date_received" name="date_received" required>
                </div>

                <div class="form-group">
                    <label for="storage_location">Storage Location</label>
                    <select id="storage_location" name="storage_location" required>
                        <option value="Data Office">Data Office</option>
                        <option value="Server Room">Server Room</option>
                        <option value="Container">Container</option>
                    </select>
                </div>

                <div class="form-group">
                    <label for="condition">Condition</label>
                    <select id="condition" name="condition" required>
                        <option value="New">New</option>
                        <option value="Good">Good</option>
                        <option value="Fair">Fair</option>
                        <option value="Poor">Poor</option>
                    </select>
                </div>

                <div class="form-group">
                    <label for="status">Status</label>
                    <select id="status" name="status" required>
                        <option value="Available">Available</option>
                        <option value="In Use">In Use</option>
                        <option value="Maintenance">Maintenance</option>
                        <option value="Retired">Retired</option>
                    </select>
                </div>
                
                <div class="form-actions">
                    <button type="submit" class="submit-btn">Save Item</button>
                    <button type="button" class="cancel-btn" onclick="closeInventoryModal()">Cancel</button>
                </div>
            </form>
        </div>
    </div>

    <!-- Inventory Delete Confirmation Modal -->
    <div id="inventoryConfirmModal" class="modal">
        <div class="modal-content">
            <span class="close-modal" onclick="closeInventoryModal()">&times;</span>
            <h3>Confirm Delete</h3>
            <p id="inventoryConfirmMessage"></p>
            <form id="inventoryConfirmForm" class="modal-form" action="/admin/inventory" method="POST">
                <input type="hidden" id="inventoryConfirmId" name="id">
                <input type="hidden" name="action" value="delete">
                <button type="submit" class="submit-btn">Confirm Delete</button>
            </form>
        </div>
    </div>

    <!-- Stock Movement Modal -->
    <div id="stockMovementModal" class="modal">
        <div class="modal-content">
            <span class="close-modal" onclick="closeStockMovementModal()">&times;</span>
            <h3>Record Stock Movement</h3>
            <form id="stockMovementForm" class="modal-form" action="/admin/stock-movement" method="POST">
                <input type="hidden" id="movementInventoryId" name="inventory_id">
                
                <div class="form-group">
                    <label for="movementType">Movement Type</label>
                    <select id="movementType" name="movement_type" required>
                        <option value="transfer">Transfer</option>
                        <option value="return">Return</option>
                        <option value="damage">Damage Report</option>
                        <option value="maintenance">Maintenance</option>
                    </select>
                </div>
                
                <div class="form-group">
                    <label for="quantity">Quantity</label>
                    <input type="number" id="quantity" name="quantity" min="1" required>
                </div>
                
                <div class="form-group">
                    <label for="fromLocation">From Location</label>
                    <select id="fromLocation" name="from_location" required>
                        <option value="Data Office">Data Office</option>
                        <option value="Server Room">Server Room</option>
                        <option value="Container">Container</option>
                    </select>
                </div>
                
                <div class="form-group">
                    <label for="toLocation">To Location</label>
                    <select id="toLocation" name="to_location" required>
                        <option value="Data Office">Data Office</option>
                        <option value="Server Room">Server Room</option>
                        <option value="Container">Container</option>
                    </select>
                </div>
                
                <div class="form-group">
                    <label for="movementNotes">Notes</label>
                    <textarea id="movementNotes" name="notes" rows="3"></textarea>
                </div>
                
                <div class="form-actions">
                    <button type="submit" class="submit-btn">Record Movement</button>
                    <button type="button" class="cancel-btn" onclick="closeStockMovementModal()">Cancel</button>
                </div>
            </form>
        </div>
    </div>

    <script>
        document.addEventListener('DOMContentLoaded', function() {
            // Get the current dashboard from URL parameters
            const urlParams = new URLSearchParams(window.location.search);
            const currentDashboard = urlParams.get('dashboard') || 'booking';
            
            // Set initial active state
            document.querySelectorAll('.dashboard-nav-item').forEach(item => {
                item.classList.remove('active');
                if (item.href.includes(currentDashboard)) {
                    item.classList.add('active');
                }
            });
            
            document.querySelectorAll('.dashboard-content').forEach(content => {
                content.classList.remove('active');
            });
            document.getElementById(`${currentDashboard}-dashboard`).classList.add('active');
        });

        function openModal(type, event = null) {
            const bookingModal = document.getElementById('bookingModal');
            const confirmModal = document.getElementById('confirmModal');
            const modalTitle = document.getElementById('modalTitle');
            const confirmTitle = document.getElementById('confirmTitle');
            const confirmMessage = document.getElementById('confirmMessage');
            const bookingForm = document.getElementById('bookingForm');
            const confirmForm = document.getElementById('confirmForm');
            const actionInput = document.getElementById('action');
            const confirmAction = document.getElementById('confirmAction');
            const confirmId = document.getElementById('confirmId');

            if (type === 'add' || type === 'edit') {
                bookingModal.style.display = 'block';
                confirmModal.style.display = 'none';
                
                if (type === 'add') {
                    modalTitle.textContent = 'Add Booking';
                    actionInput.value = 'add';
                    bookingForm.reset();
                } else {
                    modalTitle.textContent = 'Edit Booking';
                    actionInput.value = 'edit';
                    document.getElementById('bookingId').value = event.id;
                    document.getElementById('projectName').value = event.projectName;
                    document.getElementById('bookedBy').value = event.bookedBy;
                    document.getElementById('eventDate').value = event.eventDate.split('/').reverse().join('-');
                    document.getElementById('startTime').value = event.startTime;
                    document.getElementById('endTime').value = event.endTime;
                    document.getElementById('equipment').value = event.equipment;
                }
            } else {
                bookingModal.style.display = 'none';
                confirmModal.style.display = 'block';
                
                if (type === 'delete') {
                    confirmTitle.textContent = 'Delete Booking';
                    confirmMessage.textContent = `Are you sure you want to delete the booking for "${event.projectName}"?`;
                    confirmAction.value = 'delete';
                } else {
                    confirmTitle.textContent = 'Cancel Booking';
                    confirmMessage.textContent = `Are you sure you want to cancel the booking for "${event.projectName}"?`;
                    confirmAction.value = 'cancel';
                }
                confirmId.value = event.id;
            }
        }

        function closeModal() {
            document.getElementById('bookingModal').style.display = 'none';
            document.getElementById('confirmModal').style.display = 'none';
        }

        // Close modal when clicking outside
        window.onclick = function(event) {
            const bookingModal = document.getElementById('bookingModal');
            const confirmModal = document.getElementById('confirmModal');
            const inventoryModal = document.getElementById('inventoryModal');
            const inventoryConfirmModal = document.getElementById('inventoryConfirmModal');
            
            if (event.target === bookingModal || event.target === confirmModal) {
                closeModal();
            }
            if (event.target === inventoryModal || event.target === inventoryConfirmModal) {
                closeInventoryModal();
            }
        }

        function openInventoryModal(type, item = null) {
            const modal = document.getElementById('inventoryModal');
            const modalTitle = document.getElementById('inventoryModalTitle');
            const form = document.getElementById('inventoryForm');
            const actionInput = document.getElementById('inventoryAction');
            const idInput = document.getElementById('inventoryId');

            // Reset form
            form.reset();
            
            if (type === 'add') {
                modalTitle.textContent = 'Add Inventory Item';
                actionInput.value = 'add';
                idInput.value = '';
            } else if (type === 'edit' && item) {
                modalTitle.textContent = 'Edit Inventory Item';
                actionInput.value = 'edit';
                idInput.value = item.id;
                
                // Fill form with item data
                document.getElementById('name').value = item.name || '';
                document.getElementById('serial_number').value = item.serial_number || '';
                document.getElementById('project').value = item.project || '';
                document.getElementById('description').value = item.description || '';
                document.getElementById('notes').value = item.notes || '';
                document.getElementById('supplier').value = item.supplier || '';
                document.getElementById('date_received').value = item.date_received || '';
                document.getElementById('storage_location').value = item.storage_location || 'Data Office';
                document.getElementById('condition').value = item.condition || 'New';
                document.getElementById('status').value = item.status || 'Available';
            }

            modal.style.display = 'block';
        }

        function closeInventoryModal() {
            const modal = document.getElementById('inventoryModal');
            modal.style.display = 'none';
        }

        // Handle inventory form submission
        document.getElementById('inventoryForm').addEventListener('submit', async function(e) {
            e.preventDefault();
            
            const submitButton = this.querySelector('button[type="submit"]');
            submitButton.disabled = true;
            
            const formData = new FormData(this);
            const data = Object.fromEntries(formData.entries());
            
            try {
                const response = await fetch('/admin/inventory', {
                    method: 'POST',
                    headers: {
                        'Content-Type': 'application/json',
                        'Accept': 'application/json'
                    },
                    body: JSON.stringify(data)
                });
                
                const result = await response.json();
                
                if (result.success) {
                    showNotification(result.message, 'success');
                    closeInventoryModal();
                    setTimeout(() => window.location.reload(), 1000);
                } else {
                    showNotification(result.message || 'Failed to save item', 'error');
                    submitButton.disabled = false;
                }
            } catch (error) {
                console.error('Error:', error);
                showNotification('An error occurred while saving the item', 'error');
                submitButton.disabled = false;
            }
        });

        // Handle stock movement form submission
        document.getElementById('stockMovementForm').addEventListener('submit', async function(e) {
            e.preventDefault();
            
            const submitButton = this.querySelector('button[type="submit"]');
            submitButton.disabled = true;
            
            const formData = new FormData(this);
            const data = Object.fromEntries(formData.entries());
            
            try {
                const response = await fetch('/admin/stock-movement', {
                    method: 'POST',
                    headers: {
                        'Content-Type': 'application/json',
                        'Accept': 'application/json'
                    },
                    body: JSON.stringify(data)
                });
                
                const result = await response.json();
                
                if (result.success) {
                    showNotification(result.message, 'success');
                    closeStockMovementModal();
                    setTimeout(() => window.location.reload(), 1000);
                } else {
                    showNotification(result.message || 'Failed to record movement', 'error');
                    submitButton.disabled = false;
                }
            } catch (error) {
                console.error('Error:', error);
                showNotification('An error occurred while recording movement', 'error');
                submitButton.disabled = false;
            }
        });

        // Function to show notifications
        function showNotification(message, type) {
            const notificationDiv = document.createElement('div');
            notificationDiv.className = `notification ${type}`;
            notificationDiv.textContent = message;
            document.body.appendChild(notificationDiv);
            
            setTimeout(() => {
                notificationDiv.style.opacity = '0';
                setTimeout(() => notificationDiv.remove(), 300);
            }, 3000);
        }

        // Add event listeners for modal close buttons
        document.querySelectorAll('.close-modal').forEach(button => {
            button.addEventListener('click', function() {
                const modal = this.closest('.modal');
                if (modal) {
                    modal.style.display = 'none';
                }
            });
        });

        // Close modals when clicking outside
        window.addEventListener('click', function(event) {
            if (event.target.classList.contains('modal')) {
                event.target.style.display = 'none';
            }
        });

        // Add this function if it doesn't exist
        function searchInventory() {
            const searchTerm = document.getElementById('searchInput').value.toLowerCase();
            const rows = document.querySelectorAll('#inventory-dashboard table tbody tr');
            
            rows.forEach(row => {
                const name = row.cells[0].textContent.toLowerCase();
                const serialNumber = row.cells[1].textContent.toLowerCase();
                const project = row.cells[2].textContent.toLowerCase();
                
                if (name.includes(searchTerm) || 
                    serialNumber.includes(searchTerm) || 
                    project.includes(searchTerm)) {
                    row.style.display = '';
                } else {
                    row.style.display = 'none';
                }
            });
        }

        function filterInventory() {
            const dateFilter = document.getElementById('dateFilter').value;
            const rows = document.querySelectorAll('#inventory-dashboard table tbody tr');
            const today = new Date();
            
            rows.forEach(row => {
                const dateReceived = new Date(row.cells[6].textContent);
                let show = true;
                
                switch(dateFilter) {
                    case 'today':
                        show = dateReceived.toDateString() === today.toDateString();
                        break;
                    case 'week':
                        const weekAgo = new Date(today.setDate(today.getDate() - 7));
                        show = dateReceived >= weekAgo;
                        break;
                    case 'month':
                        const monthAgo = new Date(today.setMonth(today.getMonth() - 1));
                        show = dateReceived >= monthAgo;
                        break;
                    case 'year':
                        const yearAgo = new Date(today.setFullYear(today.getFullYear() - 1));
                        show = dateReceived >= yearAgo;
                        break;
                }
                
                row.style.display = show ? '' : 'none';
            });
        }

        function clearFilters() {
            document.getElementById('searchInput').value = '';
            document.getElementById('dateFilter').value = '';
            const rows = document.querySelectorAll('#inventory-dashboard table tbody tr');
            rows.forEach(row => row.style.display = '');
        }

        // Add event listener for Enter key in search input
        document.getElementById('searchInput').addEventListener('keypress', function(e) {
            if (e.key === 'Enter') {
                searchInventory();
            }
        });

        // Add this function to your existing script
        function exportToExcel() {
            try {
                // Create workbook with multiple sheets
                const workbook = {
                    inventory: [],
                    movements: [],
                    damaged: []
                };

                // Get inventory data
                const inventoryTable = document.querySelector('#inventory-dashboard .events-table');
                if (inventoryTable) {
                    const headers = Array.from(inventoryTable.querySelectorAll('thead th'))
                        .map(th => th.textContent.trim());
                    workbook.inventory.push(headers);

                    inventoryTable.querySelectorAll('tbody tr').forEach(row => {
                        const rowData = Array.from(row.cells)
                            .slice(0, -1) // Exclude actions column
                            .map(cell => cell.textContent.trim());
                        workbook.inventory.push(rowData);
                    });
                }

                // Create CSV content for each sheet
                let csvContent = '';
                
                // Inventory Sheet
                csvContent += 'Inventory Items\n';
                workbook.inventory.forEach(row => {
                    csvContent += row.join(',') + '\n';
                });
                
                // Stock Movements Sheet
                csvContent += '\n\nStock Movements\n';
                csvContent += 'Date,Item Name,Serial Number,Movement Type,Quantity,From Location,To Location,Notes,Performed By\n';
                <% if (typeof stockMovements !== 'undefined' && stockMovements.length > 0) { %>
                    <% stockMovements.forEach(movement => { %>
                        csvContent += '<%= new Date(movement.movement_date).toLocaleString() %>,<%= movement.item_name %>,<%= movement.serial_number %>,<%= movement.movement_type %>,<%= movement.quantity %>,<%= movement.from_location %>,<%= movement.to_location %>,<%= movement.notes %>,<%= movement.performed_by %>\n';
                    <% }); %>
                <% } %>
                
                // Damaged Items Sheet
                csvContent += '\n\nDamaged Items\n';
                csvContent += 'Name,Serial Number,Project,Quantity,Condition,Storage Location,Date Reported,Notes\n';
                // Filter and add damaged items
                const damagedItems = workbook.inventory.filter(row => 
                    row[4].toLowerCase().includes('damaged')
                );
                damagedItems.forEach(row => {
                    csvContent += row.join(',') + '\n';
                });

                // Create and download the file
                const blob = new Blob([csvContent], { type: 'text/csv;charset=utf-8;' });
                const url = URL.createObjectURL(blob);
                const link = document.createElement('a');
                
                link.setAttribute('href', url);
                link.setAttribute('download', `inventory_report_${new Date().toISOString().split('T')[0]}.csv`);
                document.body.appendChild(link);
                link.click();
                document.body.removeChild(link);
            } catch (error) {
                console.error('Error exporting to Excel:', error);
                alert('Error exporting data. Please try again.');
            }
        }

        function openStockMovementModal(inventoryId = null) {
            const modal = document.getElementById('stockMovementModal');
            const form = document.getElementById('stockMovementForm');
            
            if (inventoryId) {
                document.getElementById('movementInventoryId').value = inventoryId;
            }
            
            modal.style.display = 'block';
        }

        function closeStockMovementModal() {
            const modal = document.getElementById('stockMovementModal');
            modal.style.display = 'none';
        }
    </script>
</body>
</html> 