<!DOCTYPE html>
<html lang="en">
<head>
    <meta charset="UTF-8">
    <meta name="viewport" content="width=device-width, initial-scale=1.0">
    <title>THRU ZIM Events Booking</title>
    <link rel="stylesheet" href="/css/style.css">
</head>
<body>
    <nav class="navbar">
        <div class="nav-container">
            <h1 class="nav-title">THRU ZIM Events Booking</h1>
            <div class="nav-links">
                <a href="/" class="nav-link active">Home</a>
                <a href="/events" class="nav-link">Events</a>
            </div>
        </div>
    </nav>

    <div class="container">
        <% if (showMessage && locals.success) { %>
            <div class="message success" id="successMessage">
                Booking submitted successfully!
                <button onclick="this.parentElement.style.display='none'" class="close-btn">&times;</button>
            </div>
        <% } %>
        <% if (showMessage && locals.error) { %>
            <div class="message error" id="errorMessage">
                Error submitting booking. Please try again.
                <button onclick="this.parentElement.style.display='none'" class="close-btn">&times;</button>
            </div>
        <% } %>

        <div class="booking-form">
            <h2>New Booking</h2>
            <form id="bookingForm" action="/submit-booking" method="POST">
                <div class="form-group">
                    <label for="projectName">Project Name:</label>
                    <input type="text" id="projectName" name="projectName" required>
                </div>

                <div class="form-group">
                    <label for="bookedBy">Booked By:</label>
                    <input type="text" id="bookedBy" name="bookedBy" required>
                </div>

                <div class="form-group">
                    <label>Booking Type:</label>
                    <div class="radio-group">
                        <label class="radio-label">
                            <input type="radio" name="bookingType" value="single" checked onchange="toggleDateInputs()">
                            Single Day
                        </label>
                        <label class="radio-label">
                            <input type="radio" name="bookingType" value="range" onchange="toggleDateInputs()">
                            Date Range
                        </label>
                    </div>
                </div>

                <div id="singleDateInput">
                    <div class="form-group">
                        <label for="eventDate">Event Date:</label>
                        <input type="date" id="eventDate" name="eventDate" required min="<%= new Date().toISOString().split('T')[0] %>">
                    </div>
                </div>

                <div id="dateRangeInput" style="display: none;">
                    <div class="form-row">
                        <div class="form-group half">
                            <label for="startDate">Start Date:</label>
                            <input type="date" id="startDate" name="startDate" min="<%= new Date().toISOString().split('T')[0] %>">
                        </div>
                        <div class="form-group half">
                            <label for="endDate">End Date:</label>
                            <input type="date" id="endDate" name="endDate" min="<%= new Date().toISOString().split('T')[0] %>">
                        </div>
                    </div>
                </div>

                <div class="form-row">
                    <div class="form-group half">
                        <label for="startTime">Start Time:</label>
                        <input type="time" id="startTime" name="startTime" required>
                    </div>

                    <div class="form-group half">
                        <label for="endTime">End Time:</label>
                        <input type="time" id="endTime" name="endTime" required>
                    </div>
                </div>

                <div class="form-group">
                    <label for="equipment">Equipment:</label>
                    <div class="equipment-options">
                        <div class="equipment-group">
                            <h4>Rooms</h4>
                            <label class="checkbox-label">
                                <input type="checkbox" name="equipment" value="Meeting Room"> Meeting Room
                            </label>
                            <label class="checkbox-label">
                                <input type="checkbox" name="equipment" value="Study Room"> Study Room
                            </label>
                            <label class="checkbox-label">
                                <input type="checkbox" name="equipment" value="Gazebo"> Gazebo
                            </label>
                        </div>
                        <div class="equipment-group">
                            <h4>Equipment</h4>
                            <label class="checkbox-label">
                                <input type="checkbox" name="equipment" value="Projector 1"> Projector 1
                            </label>
                            <label class="checkbox-label">
                                <input type="checkbox" name="equipment" value="Projector 2"> Projector 2
                            </label>
                            <label class="checkbox-label">
                                <input type="checkbox" name="equipment" value="Projector 3"> Projector 3
                            </label>
                            <label class="checkbox-label">
                                <input type="checkbox" name="equipment" value="Projector 4"> Projector 4
                            </label>
                            <label class="checkbox-label">
                                <input type="checkbox" name="equipment" value="Zoom Video Conferencing"> Zoom Video Conferencing
                            </label>
                        </div>
                    </div>
                </div>

                <div id="availabilityMessage" class="message" style="display: none;"></div>
                <div id="alternativeProjectors" class="message success" style="display: none;"></div>
                <button type="submit" class="submit-btn">Submit Booking Request</button>
            </form>
        </div>

        <div class="recent-bookings">
            <h2>Upcoming Events</h2>
            <% if (upcomingBookings && upcomingBookings.length > 0) { %>
                <div class="bookings-grid">
                    <% upcomingBookings.forEach(booking => { %>
                        <div class="booking-card">
                            <h3><%= booking.projectName %></h3>
                            <p><strong>Booked By:</strong> <%= booking.bookedBy %></p>
                            <p><strong>Date:</strong> <%= booking.eventDate %></p>
                            <p><strong>Time:</strong> <%= booking.startTime %> - <%= booking.endTime %></p>
                            <p><strong>Equipment:</strong> <%= booking.equipment %></p>
                        </div>
                    <% }); %>
                </div>
            <% } else { %>
                <p>No upcoming events</p>
            <% } %>
        </div>
    </div>

    <script>
        // Check availability before submission
        const form = document.getElementById('bookingForm');
        const availabilityMessage = document.getElementById('availabilityMessage');
        const alternativeProjectors = document.getElementById('alternativeProjectors');
        const equipmentSelect = document.getElementById('equipment');

        async function checkAvailability() {
            const bookingType = document.querySelector('input[name="bookingType"]:checked').value;
            const startTime = document.getElementById('startTime').value;
            const endTime = document.getElementById('endTime').value;
            const selectedEquipment = Array.from(document.querySelectorAll('input[name="equipment"]:checked'))
                .map(cb => cb.value);

            if (!startTime || !endTime || selectedEquipment.length === 0) return;

            let dates = [];
            if (bookingType === 'single') {
                const eventDate = document.getElementById('eventDate').value;
                if (!eventDate) return;
                dates = [eventDate];
            } else {
                const startDate = document.getElementById('startDate').value;
                const endDate = document.getElementById('endDate').value;
                if (!startDate || !endDate) return;
                
                // Generate array of dates between start and end
                const currentDate = new Date(startDate);
                const lastDate = new Date(endDate);
                while (currentDate <= lastDate) {
                    dates.push(currentDate.toISOString().split('T')[0]);
                    currentDate.setDate(currentDate.getDate() + 1);
                }
            }

            try {
                let allAvailable = true;
                for (const date of dates) {
                    for (const equipment of selectedEquipment) {
                        const response = await fetch(`/check-availability?eventDate=${date}&startTime=${startTime}&endTime=${endTime}&equipment=${equipment}`);
                        const data = await response.json();

                        if (data.error) {
                            availabilityMessage.textContent = 'Error checking availability';
                            availabilityMessage.style.display = 'block';
                            availabilityMessage.className = 'message error';
                            alternativeProjectors.style.display = 'none';
                            return false;
                        }

                        if (!data.available) {
                            if (equipment.includes('Projector') && data.availableProjectors && data.availableProjectors.length > 0) {
                                availabilityMessage.textContent = `This projector is already booked for ${date}.`;
                                alternativeProjectors.textContent = 'Available projectors: ' + data.availableProjectors.join(', ');
                                alternativeProjectors.style.display = 'block';
                            } else {
                                availabilityMessage.textContent = `${equipment} is already booked for ${date}`;
                                alternativeProjectors.style.display = 'none';
                            }
                            availabilityMessage.style.display = 'block';
                            availabilityMessage.className = 'message error';
                            allAvailable = false;
                            break;
                        }
                    }
                    if (!allAvailable) break;
                }

                if (allAvailable) {
                    availabilityMessage.textContent = 'Equipment is available for the selected date(s)';
                    availabilityMessage.style.display = 'block';
                    availabilityMessage.className = 'message success';
                    alternativeProjectors.style.display = 'none';
                }

                return allAvailable;
            } catch (error) {
                console.error('Error:', error);
                return false;
            }
        }

        function toggleDateInputs() {
            const bookingType = document.querySelector('input[name="bookingType"]:checked').value;
            const singleDateInput = document.getElementById('singleDateInput');
            const dateRangeInput = document.getElementById('dateRangeInput');
            const eventDate = document.getElementById('eventDate');
            const startDate = document.getElementById('startDate');
            const endDate = document.getElementById('endDate');

            if (bookingType === 'single') {
                singleDateInput.style.display = 'block';
                dateRangeInput.style.display = 'none';
                eventDate.required = true;
                startDate.required = false;
                endDate.required = false;
            } else {
                singleDateInput.style.display = 'none';
                dateRangeInput.style.display = 'block';
                eventDate.required = false;
                startDate.required = true;
                endDate.required = true;
            }
        }

        // Add validation for date range
        document.getElementById('endDate').addEventListener('change', function() {
            const startDate = document.getElementById('startDate');
            const endDate = this;
            
            if (startDate.value && endDate.value) {
                if (new Date(endDate.value) < new Date(startDate.value)) {
                    alert('End date cannot be before start date');
                    endDate.value = '';
                }
            }
        });

        // Update form submission to handle date range
        form.addEventListener('submit', async (e) => {
            e.preventDefault();
            const bookingType = document.querySelector('input[name="bookingType"]:checked').value;
            const startDate = document.getElementById('startDate');
            const endDate = document.getElementById('endDate');
            const eventDate = document.getElementById('eventDate');
            const selectedEquipment = Array.from(document.querySelectorAll('input[name="equipment"]:checked'))
                .map(cb => cb.value);

            if (selectedEquipment.length === 0) {
                alert('Please select at least one piece of equipment');
                return;
            }

            if (bookingType === 'range' && (!startDate.value || !endDate.value)) {
                alert('Please select both start and end dates');
                return;
            }

            if (bookingType === 'single' && !eventDate.value) {
                alert('Please select an event date');
                return;
            }

            // Combine room and equipment into a single booking
            const room = selectedEquipment.find(item => ['Meeting Room', 'Study Room', 'Gazebo'].includes(item));
            const equipment = selectedEquipment.filter(item => !['Meeting Room', 'Study Room', 'Gazebo'].includes(item));
            
            // Create a combined equipment string
            let combinedEquipment = '';
            if (room) {
                combinedEquipment = room;
                if (equipment.length > 0) {
                    combinedEquipment += ' + ' + equipment.join(' + ');
                }
            } else {
                combinedEquipment = equipment.join(' + ');
            }

            // Store the original checkboxes
            const originalCheckboxes = Array.from(document.querySelectorAll('input[name="equipment"]:checked'));

            // Remove all existing equipment inputs
            const existingInputs = form.querySelectorAll('input[name="equipment"]');
            existingInputs.forEach(input => input.remove());

            // Create a new hidden input for the combined equipment
            const hiddenInput = document.createElement('input');
            hiddenInput.type = 'hidden';
            hiddenInput.name = 'equipment';
            hiddenInput.value = combinedEquipment;
            form.appendChild(hiddenInput);

            // Set the event date based on booking type
            if (bookingType === 'range') {
                eventDate.value = startDate.value;
            }

            const available = await checkAvailability();
            if (available) {
                try {
                    const formData = new FormData(form);
                    const response = await fetch('/submit-booking', {
                        method: 'POST',
                        body: formData
                    });
                    
                    if (response.ok) {
                        // Show success message
                        const successMessage = document.createElement('div');
                        successMessage.className = 'message success';
                        successMessage.textContent = 'Booking submitted successfully!';
                        form.insertBefore(successMessage, form.firstChild);
                        
                        // Reset form
                        form.reset();
                        
                        // Restore original checkboxes
                        originalCheckboxes.forEach(checkbox => {
                            const newCheckbox = document.createElement('input');
                            newCheckbox.type = 'checkbox';
                            newCheckbox.name = 'equipment';
                            newCheckbox.value = checkbox.value;
                            const label = document.createElement('label');
                            label.className = 'checkbox-label';
                            label.appendChild(newCheckbox);
                            label.appendChild(document.createTextNode(' ' + checkbox.value));
                            document.querySelector('.equipment-options').appendChild(label);
                        });

                        // Reload the page after a short delay
                        setTimeout(() => {
                            window.location.reload();
                        }, 1500);
                    } else {
                        alert('Error submitting booking. Please try again.');
                    }
                } catch (error) {
                    console.error('Error:', error);
                    alert('Error submitting booking. Please try again.');
                }
            }
        });

        // Auto-hide success/error messages after 5 seconds
        const messages = document.querySelectorAll('.message.success, .message.error');
        messages.forEach(message => {
            setTimeout(() => {
                message.style.display = 'none';
            }, 5000);
        });

        // Equipment selection validation
        document.querySelectorAll('input[name="equipment"]').forEach(checkbox => {
            checkbox.addEventListener('change', function() {
                const selectedRooms = Array.from(document.querySelectorAll('input[name="equipment"]:checked'))
                    .filter(cb => ['Meeting Room', 'Study Room', 'Gazebo'].includes(cb.value))
                    .map(cb => cb.value);

                if (selectedRooms.length > 1) {
                    // If trying to select multiple rooms, uncheck the current selection
                    this.checked = false;
                    alert('You can only select one room at a time (Meeting Room, Study Room, or Gazebo).');
                }
            });
        });
    </script>
</body>
</html> 